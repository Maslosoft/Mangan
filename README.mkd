This extension will add (one day) full featured Mongo DB support for Yii.

The goal of this extension is to cleanup and merge some of the various Mongo DB extensions available for Yii, and package them into a full-feature suite.

ActiveRecord like support for MongoDB in Yii is nearly complete, and has had (some) bug testing and fixing.

There isn't a way to do free-form queries, this will be added.

Use of Yii helpers such as logging, session, and data access are partially supported.

This extension originally started as a fork of [YiiMongoDbSuite](canni.github.com/YiiMongoDbSuite "YiiMongoDbSuite"),
written by [canni](https://github.com/canni "canni") and further improved by several developers ([mintao](https://github.com/mintao "mintao"), et al).
YiiMongoDbSuite originally started as a fork of [MongoRecord](www.yiiframework.com/extension/mongorecord "MongoRecord")
extension written by [tyohan](http://www.yiiframework.com/user/31/ "tyohan"),
to fix some major bugs, and add full featured suite for [MongoDB](http://www.mongodb.org "MongoDB") developers.

**PLEASE refer to the new FULL-Documentation [page](http://canni.github.com/YiiMongoDbSuite)**

*Work-around for using the `OR` operator with this extension provided in [comments](http://www.yiiframework.com/extension/yiimongodbsuite/#c2450)*

The current version is 1.4.

## The Key Feature List:

### Features Covered From Standard Yii Implementations

- Support of using Class::model()->find / findAll / count / countByAttributes and other Yii ActiveRecord syntax.
- Named scopes, along with default scope and parameterized scopes, just like in AR.
- Ready to go out-of-box *EFFICIENT* DataProvider, witch use native php db driver sort, limit and offset features for returning results!
- Model classes and embedded documents inherit from CModel, so you can use every class witch can handle of CModel (ie: Gii form generator)
- Relations support *idea/concept/example*.
- **Support for generating CRUD for EMongoDocument models, with Gii!**.
- **Support for generating mongo document models from existing SQL tables!**.
- Use MongoDB for LogRoute and HttpSession.
- Easy to use criteria object, you don't have to create complex MongoDB query arrays.
- **Fixtures manager, that can replace the Yii default one, and work with Mongo model.**

### MongoDB Related Feature List

- Support of schema-less documents with Yii standard rules and validation features
- Embedded/Nested document support (Embedded documents have their own Model classes with their own rules and other methods)
- (almost, limited only by MongoDB 4MB limit of single document) endless document embedding/nesting
- Lazy loading/creating of embedded documents
- Ability to set FSync and/or Safe flag of DB write operations on different scopes, globally, on model level, and on single model object
- **Ability to use efficient MongoDB Cursors instead of raw arrays of results, returned by the findAll* methods**
- MongoDB GridFS feature support, thanks to work of Jose Martinez and Philippe Gaultier
- Support for using any other than _id field as a Primary Key, for a collection
- *Support to have different models in single collection!*
- automated efficient index definition for collections, per model
- Support "Soft" documents, documents that do not have fixed list of attributes
- **Ability to do *Extreme Efficent* document partial updates, that make use of MongoDB `$set` operator/feature**
- Support for PHP Mongo driver versions below 1.0.5
- Support for partial loading of documents from DB
- **`EMongoPartialDocument` class, that supports full-featured partial loading of documents from DB**
- **Ability to do massive [partial updates of multiple documents][advanced.partial-batch-update]**

## Limitations
- The main limitations are only those present in MongoDB itself, like the 4mb data transfer limit. But That's not a big deal either.
- In it's current incarnation, This extension does NOT work with the "$or" criteria operator. When we get it working we will remove this line and add an example.

*IMPORTANT: The version on GitHub is more up to date as fixes are pushed to the project. This may or may not get updated on a regular basis*

## Requirements

- Yii 1.1.5 is required.
- MongoDB 1.8 is recommended. Untested with older versions.


## Setup

In your protected/config/main.php config file. Comment out (or delete) the current 'db' array
for your database in the components section, and add the following to the file:

~~~
[php]
    'import' => array(
      ...
      'ext.YiiMongoDbSuite.*',
    ),
    'components' => array(
      ...
      'mongodb' => array(
        'class'            => 'EMongoDB',
        'connectionString' => 'mongodb://localhost',
        'dbName'           => 'myDatabaseName',
        'fsyncFlag'        => true,
        'safeFlag'         => true,
        'useCursor'        => false
      ),
    ),
~~~

- ConnectionString: 'localhost' should be changed to the ip or hostname of your host being connected to. For example
  if connecting to a server it might be `'connectionString' => 'mongodb://username@xxx.xx.xx.xx'` where xx.xx.xx.xx is
  the ip (or hostname) of your webserver or host.
- dbName: The database name, where your collections will be be stored in.
- fsyncFlag If set to true, this makes mongodb make sure all writes to the database are safely stored to disk (true by default).
- safeFlag If set to true, mongodb will wait to retrieve status of all write operations, and check if everything went OK (true by default).
- useCursors If set to true, extension will return EMongoCursor instead of raw pre-populated arrays, from findAll* methods (defaults to false for backwards compatibility).

That's all you have to do for setup. You can use it very much like the active record.
For example:

~~~
[php]
    $client = new Client();
    $client->first_name='something';
    $client->save();
    $clients = Client::model()->findAll();
~~~


## Basic Usage

Just define following model:

~~~
[php]
    class User extends EMongoDocument
    {
      public $login;
      public $name;
      public $pass;

      // This has to be defined in every model, this is same as with standard Yii ActiveRecord
      public static function model($className=__CLASS__)
      {
        return parent::model($className);
      }

      // This method is required!
      public function getCollectionName()
      {
        return 'users'; // should be lowercase.
      }

      // same as CActiveRecord
      public function rules()
      {
        return array(
          array('login, pass', 'required'),
          array('login, pass', 'length', 'max' => 20),
          array('name', 'length', 'max' => 255),
        );
      }

      // same as CActiveRecord
      public function attributeLabels()
      {
        return array(
          'login'  => 'User Login',
          'name'   => 'Full name',
          'pass'   => 'Password',
        );
      }
    }
~~~

And that's it! Now start using this User model class like standard Yii AR model.

## Embedded Documents

*NOTE: For performance reasons embedded documents should extend from EMongoEmbeddedDocument instead of EMongoDocument.*

EMongoEmbeddedDocument is almost identical as EMongoDocument, in fact EMongoDocument extends from EMongoEmbeddedDocument
and adds to it the DB connection and related functions.

NOTE: Embedded documents should not have a static model() method!

So if you have a User.php model, and an UserAddress.php model which is the embedded document.
Lest assume we have following embedded document:

~~~
[php]
    class UserAddress extends EMongoEmbeddedDocument
    {
      public $city;
      public $street;
      public $house;
      public $apartment;
      public $zip;

      public function rules()
      {
        return array(
          array('city, street, house', 'length', 'max'=>255),
          array('house, apartment, zip', 'length', 'max'=>10),
        );
      }

      public function attributeLabels()
      {
        return array(
          'zip'=>'Postal Code',
        );
      }
    }
~~~

Now we can add this method to our User model from previous section:

~~~
[php]
    class User extends EMongoDocument {
      ...

      public function embeddedDocuments()
      {
        return array(
          // property name => embedded document class name
          'address'=>'UserAddress'
        );
      }

      ...
    }
~~~

And using it is as easy as Ï€!

~~~
[php]
    $client = new Client;
    $client->address->city='New York';
    $client->save();
~~~

This will automatically call validation for the model and all its embedded documents.
You can even nest embedded documents in embedded documents, just define embeddedDocuments() method with array of another embedded documents.
*IMPORTANT*: This mechanism uses recurrency, and will not handle circular nesting, so use this feature with care :P

## Arrays

You easily can store arrays in DB!

**Simple arrays**

- just define a property for an array, and store an array in it.

**Arrays of embedded documents**

- there is no way (that i know) where i can easily provide mechanism for this, you have to write Your own
- This is how I accomplish it for now:

~~~
[php]
    // add a property for your array of embedded documents
    public $addresses;

    // add EmbeddedArraysBehavior
    public function behaviors()
    {
      return array(
        array(
          'class'=>'ext.YiiMongoDbSuite.extra.EEmbeddedArraysBehavior',
          'arrayPropertyName'=>'addresses', // name of property
          'arrayDocClassName'=>'ClientAddress' // class name of documents in array
        ),
      );
    }
~~~

So for the user, if you want them to be able to save multiple addresses, you can do this:

~~~
[php]
    $c = new Client;
    $c->addresses[0] = new ClientAddress;
    $c->addresses[0]->city='NY';
    $c->save(); // behavior will handle validation of array too
~~~

or

~~~
[php]
    $c = Client::model()->find();
    foreach($c->addresses as $addr)
    {
        echo $addr->city;
    }
~~~


## Querying

This is one of the things that makes this extension great. It's very easy to query for the objects you want.

~~~
[php]
    // simple find first. just like normal AR.
    $object = ModelClass::model()->find()
~~~

Now suppose you want to only retrieve users, that have a status of 1 (active). There is an object just for that, making queries easy.

~~~
[php]
    $c = new EMongoCriteria;
    $c->status('==', 1);
    $users = ModelClass::model->findAll($c);
~~~

and now $users will be an array of all users with the status key in their document set to 1. This is a good way to list only active users.
What's that? You only want to show the 10 most recent activated users? Thats easy too.

~~~
[php]
    $c = new EMongoCriteria;
    $c->active('==', 1)->limit(10);

    $users = ModelClass::model->findAll($c);
~~~

It's that easy. In place of the 'equals' key, you can use any of the following operators:

~~~
    - 'greater'   | >
    - 'greaterEq' | >=
    - 'less'      | <
    - 'lessEq'    | <=
    - 'notEq'     | !=, <>
    - 'in'        |
    - 'notIn'     |
    - 'all'       |
    - 'size'      |
    - 'exists'    |
    - 'type'      | // BSON type see mongodb docs for this
    - 'notExists' |
    - 'mod'       | %
    - 'equals'    | ==
    - 'where'     | // JavaScript operator
~~~

*NOTICE: the $or operator in newer versions of mongodb does NOT work with this extension yet. We will add it to the list above when it is fixed. Newer versions of MongoDB will work, just not the $or operator.
For examples and use for how to use these operators effectively, use the [MongoDB Operators Documentation here](http://www.mongodb.org/display/DOCS/Advanced+Queries).

Here are a few more examples for using criteria:

~~~
[php]
    // first you must create a new criteria object
    $criteria = new EMongoCriteria;

    // find the single user with the personal_number == 12345
    $criteria->personal_number('==', 12345);
    // OR like this:
    $criteria->personal_number = 12345;

    $user = User::model->find($criteria);

    // find all users in New York. This will search in the embedded document of UserAddress
    $criteria->address->city('==', 'New York');
    // Or
    $criteria->address->city = 'New York';
    $users = User::model()->findAll($criteria);

    // Ok now try this. Only active users, only show at most 10 users, and sort by first name, descending, and offset by 20 (pagination):
    // note the sort syntax. it must have an array value and use the => syntax.
    $criteria->status('==', 1)->limit(10)->sort(array('firstName' => EMongoCriteria::SORT_DESC))->offset(20);
    $users = User::model()->findAll($criteria);

    // A more advanced case. All users with a personal_number evenly divisible by 10, sorted by first name ascending, limit 10 users, offset by 25 users (pagination), and remove any address fields from the returned result.
    $criteria->personal_number('%', array(10, 0)) // modulo => personal_number % 10 == 0
             ->sort(array('firstName' => EMongoCriteria::SORT_ASC))
             ->limit(10)
             ->offset(25);
    $users = User::model()->findAll($criteria);

    // You can even use the where operator with javascript like so:
    $criteria->fieldName('where', ' expression in javascript ie: this.field > this.field2');
    // but remember that this kind of query is a bit slower than normal finds.
~~~


### Regexp / SQL LIKE Replacemt

You can use native PHP Mongo driver class MongoRegex, to query:

~~~
[php]
    // Create criteria
    $criteria = new EMongoCriteria;
    // Find all records witch have first name starring on a, b and c, case insensitive search
    $criteria->first_name = new MongoRegex('/[abc].*/i');
    $clients = Client::model()->findAll($criteria);
    // see phpdoc for MongoRegex class for more examples
~~~

for reference on how to use query array see: http://www.php.net/manual/en/mongocollection.find.php

### Creating Criteria Objects From Arrays

~~~
[php]
    // Example criteria
    $array = array(
        'conditions'=>array(
        	// field name => operator definition
        	'FieldName1'=>array('greaterEq' => 10), // Or 'FieldName1'=>array('>=', 10)
        	'FieldName2'=>array('in' => array(1, 2, 3)),
        	'FieldName3'=>array('exists'),
        ),
        'limit'=>10,
        'offset'=>25,
        'sort'=>array('fieldName1'=>EMongoCriteria::SORT_ASC, 'fieldName4'=>EMongoCriteria::SORT_DESC),
    );
    $criteria = new EMongoCriteria($array);
    // or
    $clients = ClientModel::model()->findAll($array);
~~~

## Known bugs

- Remember, this is not complete yet. So at this stage, it can have some ;]
- If you find any please let me know.
- As said before, it does not work with the OR operators.


## Resources

 * [Project Page on GitHub](https://github.com/digitick/yii-mongodb-suite)
 * [Report a Bug](https://github.com/digitick/yii-mongodb-suite/issues)
 * [MongoDB Documentation](http://www.mongodb.org/display/DOCS/Home)
 * [PHP MongoDB Driver docs](http://www.php.net/manual/en/book.mongo.php)
 * [Standard Yii ActiveRecord Documentation](http://www.yiiframework.com/doc/guide/1.1/en/database.ar)


## Contribution needed!

- Any help would be great :)


## Acknowledgments

We stand upon the shoulders of giants:

- canni, for leading continued development, bug testing, and merging contributions.
- tyohan, for first inspirations and the extension's concept.
- luckysmack, for big help with testing and documentation.
- Jose Martinez and Philippe Gaultier, for implementing and sharing GridFS support.
- Nagy Attila GÃ¡bor, for big help with new functionality and testing.

