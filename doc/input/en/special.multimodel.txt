Title: Multimodel Collections
Author: Dariusz GÃ³recki <darek.krk@gmail.com>

---

You can have different models in a single collection, example:

~~~
[php]
class Client extends EMongoDocument
{
	public $first_name;
	public $second_name;

	// define property for finding type
	public $type;
		
	public function getCollectionName()
	{
		return 'clients';
	}
	
	/**
	 * We can override the instantiate method to return correct models
	 */
	protected function instantiate($attributes)
	{
		$class = get_class($this);
		$model = new $class(null);
		$model->initEmbeddedDocuments(); // We have to do it manually here!
		$model->setAttributes($attributes, false);
		return $model;
	}
	
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	public function defaultScope()
	{
		return array(
			'conditions'=>array('type'=>array('==' => get_class($this))
		);
	}

	public function beforeSave()
	{
		if(parent::beforeSave())
		{
			$this->type =  get_class($this);
			return true;
		}
		else return false
	}
}
	
class NormalClient extends Client
{
	public $additionalField;

	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
}

class BusinessClient extends Client
{
	public $taxNo;


	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
}
~~~

Now we can:

~~~
[php]
// now you can:
$bclients = BusinessClient::model()->findAll();
$clients = NormalClient::model()->findAll();

$allClients = Client::model()->findAll();

// but they're kept in single collection ! and can be indexed with single field etc.
~~~